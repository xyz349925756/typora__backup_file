# 1. 如果您对 toml 格式不太了解，可以花三分钟时间学习一下：https://toml.io/cn/v1.0.0
# 2. 修改配置前，请读本目录下的【请读我.md】文件
# 3. 如何修改配置？答：将此文件的内容粘贴到 custom_plugin.user.toml 文件中，接着关闭此文件，根据说明文字修改 custom_plugin.user.toml 文件，最后重启 Typora
# 4. 所有插件都允许单独开启/关闭，开发者鼓励您修改配置，以符合自身需求


############### kanban ###############
[kanban]
# 右键菜单中展示的名称
name = "插入kanban"
# 是否启用此自定义插件
enable = true
# 插件配置
[kanban.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "kanban"
# 严格模式，不会忽略存在语法错误的代码行，直接在页面上报错（此选项用于控制所有看板，如果设置为true，那么会强制所有看板进入严格模式）
# 也可以在代码块首行添加use strict，进入严格模式（此操作用于控制单个看板）
STRICT_MODE = false
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = false
# 当描述为空时隐藏
HIDE_DESC_WHEN_EMPTY = true
# 看板最大高度（单位：px）（若<0，则全部显示）
KANBAN_MAX_HEIGHT = 700
# 当鼠标位于看板时，ctrl+wheel滚动看板
CTRL_WHEEL_TO_SCROLL = true
# 看板的颜色
# 如果你新增了颜色，请保持 KANBAN_COLOR 和 TASK_COLOR 数量一致，否则颜色会乱套，就不好看了
KANBAN_COLOR = [
    "#FFE0B2",
    "#DAE9F4",
    "#FEDCCC",
    "#C6E5D9",
    "#FFF1B9",
]
# 任务的颜色
TASK_COLOR = [
    "#FFFDE7",
    "#F8FAFF",
    "#FFFFF2",
    "#FFFCF0",
    "#FFFFF5",
]
# 自动插入的模板
TEMPLATE = """```kanban
use strict
# Today's task

## Todo
* 语法说明(一级标题表示看板标题\\n二级标题表示看板\\n- 或 * 表示任务)
- 数量、配色(看板和任务都可以无限添加\\n\\n可以前往配置修改你喜欢的颜色)
- 严格模式(在首行添加 use strict 进入严格模式，将不会忽略语法错误)
- 当描述为空时隐藏描述框

## In-Progress
- 当任务数量太多，出现滚动条时(可以将鼠标置于看板下，使用【鼠标滚轮】滚动任务)
- 当看板数量太多，出现滚动条时(可以将鼠标置于看板下，使用【ctrl+鼠标滚轮】滚动看板)

## Completed
- NOTE(语法是开发者定义的，没有通用性，只建议用于【每日任务】临时使用)
```
"""


############### echarts ###############
[echarts]
# 右键菜单中展示的名称
name = "插入echarts"
# 是否启用此自定义插件
enable = true
# 插件配置
[echarts.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "echarts"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = true
# 渲染器: canvas/svg
# 怎么选择请参考：https://echarts.apache.org/handbook/zh/best-practices/canvas-vs-svg/
RENDERER = "svg"
# 导出时echarts转成什么格式
# 可选 png, jpg, svg
# 注意：png, jpg只有在canvas渲染器的时候可用，svg只有在使用svg渲染器的时候可用
EXPORT_TYPE = "svg"
# 代码块默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 代码块背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```echarts
// 提供内置变量:
//   1. myChart: echarts实例
//   2. echarts: echarts模块
//   3. option:  echarts的option
//   4. this:    echarts插件实例
// 示例：https://echarts.apache.org/examples/zh/index.html#chart-type-line
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "300px", width: ""}

option = {
    xAxis: {
        data: ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"]
    },
    yAxis: {},
    series: [{
        name: '销量',
        type: 'bar',
        data: [5, 20, 36, 10, 10, 20]
    }]
};
myChart.on('click', params => alert(params.name));
```
"""


############### chart ###############
[chart]
# 右键菜单中展示的名称
name = "插入chart"
# 是否启用此自定义插件
enable = true
# 插件配置
[chart.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "chart"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = true
# 代码块默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 代码块背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```chart
// 提供内置变量:
//   1. myChart: chart实例
//   2. Chart:   chart类
//   3. config:  chart的config
//   4. this:    chart插件实例
// API：https://chart.nodejs.cn/docs/latest/developers/api.html
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "300px", width: ""}

config = {
  type: "bar",
  data: {
    labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
    datasets: [{
      label: "# of Votes",
      data: [12, 19, 3, 5, 2, 3],
      backgroundColor: [
        "rgba(255, 99, 132, 0.2)", "rgba(54, 162, 235, 0.2)", "rgba(255, 206, 86, 0.2)",
        "rgba(75, 192, 192, 0.2)", "rgba(153, 102, 255, 0.2)", "rgba(255, 159, 64, 0.2)"
      ],
      borderColor: [
        "rgba(255, 99, 132, 1)", "rgba(54, 162, 235, 1)", "rgba(255, 206, 86, 1)",
        "rgba(75, 192, 192, 1)", "rgba(153, 102, 255, 1)", "rgba(255, 159, 64, 1)"
      ],
      borderWidth: 1
    }]
  },
  options: {
    onClick: (e) => {
      const canvasPosition = Chart.helpers.getRelativePosition(e, myChart);
      window.alert(`click position: (${canvasPosition.x},${canvasPosition.y})`);
    }
  }
}
```
"""


############### calendar ###############
[calendar]
# 右键菜单中展示的名称
name = "插入calendar"
# 是否启用此自定义插件
enable = true
# 插件配置
[calendar.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "calendar"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = true
# 代码块默认高度
DEFAULT_FENCE_HEIGHT = "800px"
# 代码块背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```calendar
// 提供内置变量:
//   1. calendar: calendar实例
//   2. Calendar: Calendar类
//   3. option:   calendar的option
//   4. this:     calendar插件实例
// example：https://nhn.github.io/tui.calendar/latest/tutorial-06-daily-view
// API: https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "800px", width: ""}

option = {
    defaultView: 'week',
    calendars: [
        {
            id: 'cal1',
            name: 'Personal',
            backgroundColor: '#03bd9e',
        },
        {
            id: 'cal2',
            name: 'Work',
            backgroundColor: '#00a9ff',
        },
    ],
};

```
"""


############### timeline ###############
[timeline]
# 右键菜单中展示的名称
name = "插入timeline"
# 是否启用此自定义插件
enable = true
# 插件配置
[timeline.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "timeline"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = false
# 背景颜色
BACKGROUND_COLOR = "#fafafa"
# 标题的字体颜色
TITLE_COLOR = "#555"
# 左侧时间线的颜色
LINE_COLOR = "#eee"
# 时间圆点的颜色
CIRCLE_COLOR = "#999"
# 时间的字体颜色
TIME_COLOR = "#555"
# 自动插入的模板
TEMPLATE = """```timeline
# 使用一级标题表示timeline的标题

## 2022-10-1
### 使用二级标题表示时间，三到六级标题表示内容
支持简单的markdown语法
- 这是列表1
- 这是列表2
---
1. 这是有序列表1
2. 这是有效列表2

支持**加粗**，*斜体*，`代码`，~~删除~~，[链接](https://github.com/obgnail/typora_plugin)，![图片](./assets/test.jpg)
不支持代码块，因为开发者不希望代码块发生嵌套

## 2023-10-1
> 支持样式的简单嵌套：这是测试文本**这是测试文本*这是`测试文本`这是测试文本*这是测试文本**这是测试文本

## timeline的语法是开发者自定义的，谨慎使用
本timeline代码块支持导出成HTML、PDF等格式

"""


############### callouts ###############
[callouts]
# 右键菜单中展示的名称
name = "插入callouts"
# 是否启用此自定义插件
enable = true
# 插件配置
[callouts.config]
# 为标题设置颜色（和left_line_color一样）
set_title_color = true
# 鼠标悬停时展示fold callout的内容
hover_to_show_fold_callout = true
# 自动插入的模板
template = "> [!NOTE]\n> this is note"
# 使用的字体。一旦修改，就需要修改下面所有的icon
# 具体的icon值请参考font-awesome.css
font_family = "FontAwesome"
# 默认的颜色和icon
default_background_color = "#fafafa"
default_left_line_color = "#777777"
default_icon = "\\f075"
# callout的类型
[[callouts.config.list]]
type = "note"
background_color = "#e1d1eb"
left_line_color = "#6a1b9a"
icon = "\\f040"
[[callouts.config.list]]
type = "tip"
background_color = "#d8f2e5"
left_line_color = "#3abd7e"
icon = "\\f02c"
[[callouts.config.list]]
type = "example"
background_color = "#f1edfd"
left_line_color = "#777777"
icon = "\\f133"
[[callouts.config.list]]
type = "caution"
background_color = "#fde7e9"
left_line_color = "#c62828"
icon = "\\f024"
[[callouts.config.list]]
type = "failure"
background_color = "#f4d4d4"
left_line_color = "#c62828"
icon = "\\f00d"
[[callouts.config.list]]
type = "important"
background_color = "#d8e6f3"
left_line_color = "#3b83c1"
icon = "\\f132"
[[callouts.config.list]]
type = "warning"
background_color = "#feeed3"
left_line_color = "#E0AC00"
icon = "\\f071"
[[callouts.config.list]]
type = "success"
background_color = "#d8f2e5"
left_line_color = "#3abd7e"
icon = "\\f00c"
[[callouts.config.list]]
type = "question"
background_color = "#fff4ce"
left_line_color = "#E0AC00"
icon = "\\f128"
[[callouts.config.list]]
type = "info"
background_color = "#dff6dd"
left_line_color = "#3abd7e"
icon = "\\f05a"
[[callouts.config.list]]
type = "bug"
background_color = "#feeed3"
left_line_color = "#E0AC00"
icon = "\\f188"
[[callouts.config.list]]
type = "quote"
background_color = "#fafafa"
left_line_color = "#777777"
icon = "\\f10d"
[[callouts.config.list]]
type = "abstract"
background_color = "#e5f8f8"
left_line_color = "#777777"
icon = "\\f00b"


############### fullPathCopy ###############
[fullPathCopy]
# 右键菜单中展示的名称
name = "复制标题路径"
# 是否启用此自定义插件
enable = true
# 插件配置
[fullPathCopy.config]
# 快捷键
hotkey = "ctrl+shift+y"
# 跳过空白的标题
ignore_empty_header = false
# 标题和提示之前添加空格
add_space = true
# 使用绝对路径
full_file_path = false


############### extractRangeToNewFile ###############
[extractRangeToNewFile]
# 右键菜单中展示的名称
name = "提取选区文字到新文件"
# 是否启用此自定义插件
enable = true
# 插件配置
[extractRangeToNewFile.config]
# 快捷键
hotkey = ""
# 展示模态框
show_modal = true
# 自动打开新文件
auto_open = true


############### templater ###############
[templater]
# 右键菜单中展示的名称
name = "文件模板"
# 是否启用此自定义插件
enable = true
# 插件配置
[templater.config]
# 快捷键
hotkey = ""
# 自动打开新文件
auto_open = true
# 模板
# 当前支持的模板变量：
#   {{date}}： 当前日期
#   {{time}}：当前时间
#   {{weekday}}：当前周几
#   {{datetime}}：当前日期时间
#   {{yesterday}}：昨天日期
#   {{tomorrow}}：明天日期
#   {{random}}：随机数
#   {{title}}：新建文件的标题
#   {{folder}}：当前文件的目录
#   {{filepath}}：新建文件的路径
#   {{range}}：当前选取的文字
#   {{uuid}}：uuid
[[templater.config.template]]
name = "标准模板"
text = """---
title: {{title}}
date: {{date}}
tags:
---

"""
[[templater.config.template]]
name = "日记"
text = """---
title: {{title}}
date: {{date}} {{weekday}}
---

"""


############### chineseSymbolAutoPairer ###############
[chineseSymbolAutoPairer]
# 右键菜单中展示的名称
name = "中文符号自动补全"
# 是否启用此自定义插件
# 注意：此插件受Typora本身配置【匹配括号和引号】的影响，如果此配置为false，那么此插件自动禁用
enable = true
# 插件配置
[chineseSymbolAutoPairer.config]
# 兼容以前的行为：当用户输入【】时，不会变成【】】，而是将光标跳到】的右边
auto_skip = true
# 当光标在中间，左右两边都是成对符号，如：【|】；且用户键入Backspace时，同时删除左右两边的符号
auto_delete_pair = true
# 需要自动补全的符号（第一项为输入符号，第二项为补全符号）
# NOTE：其实有个问题我不知道要不要修复：中文的前后引号是不一样的，如果你键入的是后引号，此时便无法正常配对补全（好像搜狗就没有修复此问题）
auto_pair_symbols = [
    ["（", "）"],
    ["《", "》"],
    ["‘", "’"],
    ["“", "”"],
    ["【", "】"],
    ["「", "」"],
]


############### resourceOperation ###############
[resourceOperation]
# 右键菜单中展示的名称
name = "资源管理"
# 是否启用此自定义插件
enable = true
# 插件配置
[resourceOperation.config]
# 本插件是通过后缀名来判断是否是资源的
# 什么后缀判定为资源
resource_suffix = [".jpg", ".jpeg", ".png", ".gif", ".svg", ".webp", ".bmp", ".mp3", ".mp4", ".image", ".jfif", ".gif!large"]
# 什么后缀判定为md文件
markdown_suffix = [".md", ".markdown", ".mdown", ".mmd", ".rmarkdown", ".mkd", ".mdwn", ".mdtxt", ".rmd", ".mdtext"]
# 是否忽略<img src="example.jpg">里的资源（markdown是支持插入html的，此选项问是否要忽略img标签）
ignore_image_div = false
# 对于无后缀名的文件是否加入资源列表
append_empty_suffix_file = false
# 分析后的操作(delete和move都是危险操作，请务必查看report之后才选用)
# 1.report: 生成报告
# 2.delete: 直接删除
# 3.move  : 移动到当前文件夹
operation = "report"
# 是否在报告中使用md语法展示图片
use_md_syntax_in_report = false
# 自动打开报告文件
auto_open = true
# 打开报告文件后自动将此文件转为datatable
auto_use_datetable = true


############### imageReviewer ###############
[imageReviewer]
# 右键菜单中展示的名称
name = "图片查看器"
# 是否启用此自定义插件
enable = true
# 插件配置
[imageReviewer.config]
# 快捷键
hotkey = ""
# 在右下角添加一个快捷按钮
use_button = true
# 点击遮罩空白处退出
click_mask_to_exit = true
# 每次缩放的比率
zoom_scale = 0.1
# 每次旋转的角度
totate_scale = 10
# 每次倾斜的角度
skew_scale = 1
# 遮罩层的不透明度
mask_background_opacity = 0.6
# 图片最多占据80%的页面宽度
image_max_width = 80
# 图片最多占据80%的页面高度度
image_max_height = 80

# 目前支持以下功能：
#   - dummy: 无功能
#   - close: 关闭
#   - nextImage: 下张图
#   - previousImage: 上张图
#   - zoomOut: 放大图片
#   - zoomIn: 缩小图片
#   - rotateLeft: 图片向左旋转
#   - rotateRight: 图片向右旋转
#   - hFlip: 水平翻转图片
#   - vFlip: 垂直翻转图片
#   - incHSkew: 图片增大水平倾斜
#   - decHSkew: 图片减小水平倾斜
#   - incVSkew: 图片增大垂直倾斜
#   - decVSkew: 图片减小垂直倾斜
#   - originSize: 还原图片大小
#   - fixScreen: 图片大小适配屏幕
#   - autoSize： 图片大小在originSize、fixScreen之间切换
#   - restore: 图片恢复为最初状态
# 鼠标点击图片绑定的功能（三项分别为左键、中键、右键）
mousedown_function = ["nextImage", "close", "previousImage"]
# ctrl+鼠标图片时，绑定的功能（三项分别为左键、中键、右键）
ctrl_mousedown_function = ["hFlip", "dummy", "vFlip"]
# shift+鼠标图片时，绑定的功能（三项分别为左键、中键、右键）
shift_mousedown_function = ["autoSize", "dummy", "dummy"]
# alt+鼠标图片时，绑定的功能（三项分别为左键、中键、右键）
alt_mousedown_function = ["restore", "dummy", "dummy"]

# 当鼠标位于图片时，上下滚动绑定的功能（两项分别为向上滚动、向下滚动）
wheel_function = ["zoomOut", "zoomIn"]
# 当鼠标位于图片时，ctrl+上下滚动绑定的功能（两项分别为向上滚动、向下滚动）
ctrl_wheel_function = ["rotateRight", "rotateLeft"]
# 当鼠标位于图片时，shift+上下滚动绑定的功能（两项分别为向上滚动、向下滚动）
shift_wheel_function = ["incHSkew", "decHSkew"]
# 当鼠标位于图片时，alt+上下滚动绑定的功能（两项分别为向上滚动、向下滚动）
alt_wheel_function = ["incVSkew", "decVSkew"]


############### markdownLint ###############
[markdownLint]
# 右键菜单中展示的名称
name = "md格式规范检测"
# 是否启用此自定义插件
enable = true
# 插件配置
[markdownLint.config]
# 禁用的规则（参考：https://github.com/markdownlint/markdownlint/blob/main/docs/RULES.md）
disable_rules = [
    "MD012",
    "MD013",
    "MD041",
]
# 在右上角添加一个方块，用以提示lint状态（类似于idea）
use_button = true
# 方块的尺寸
button_width = "12px"
button_height = "12px"
# lint通过时方块的颜色
pass_color = "#499c54"
# lint未通过时方块的颜色
error_color = "#be9117"
# 在编辑后多长时间重新检测一次（单位：ms）
# 最低为500，若<500，则自动置为500
debounce_interval = 1000


############### reopenClosedFiles ###############
[reopenClosedFiles]
# 右键菜单中展示的名称
name = "打开上次退出时尚未关闭的标签页"
# 是否启用此自定义插件（此插件仅在window_tab启用时生效）
enable = true
# 插件配置
[reopenClosedFiles.config]
# 打开Typora自动打开
# 注意：只当双击typora.exe打开Typora时生效（打开特定文件时，自动打开上次退出时尚未关闭的标签页，明显不符合用户预期）
auto_reopen_when_init = true
# 快捷键
hotkey = ""


############### hotkeyHub ###############
[hotkeyHub]
# 右键菜单中展示的名称
name = "快捷键中心"
# 是否启用此自定义插件
# 注意：若置为false，那么hoteykey.toml的配置将失效
enable = true


############### quickButton ###############
[quickButton]
# 右键菜单中展示的名称
name = "快速按钮"
# 是否启用此自定义插件
enable = false
# 插件配置
[quickButton.config]
# 添加的按钮
#   action：取个名字，不可重名
#   coordinate：往上为x正方向，往左为y正方向。(0,0) (0,1) (1,0) (1,1) 四个坐标已被其他插件占用
#   icon：icon class
#   font_size：控制icon大小
#   hint：提示信息
#   callback：回调函数
[[quickButton.config.buttons]]
action = "md_padding_button"
coordinate = [2, 1]
icon = "fa fa-indent"
font_size = "17px"
hint = "混排优化"
callback = "md_padding.call"
[[quickButton.config.buttons]]
action = "open_in_tc_button"
coordinate = [2, 0]
icon = "fa fa-home"
font_size = "20px"
hint = "TC打开"
callback = "openInTotalCommander.callback"


############### autoTrailingWhiteSpace ###############
# 此插件是为了满足Markdown换行语法，除非有特殊需求，否则不建议开启此插件
# 参考：https://markdown.com.cn/basic-syntax/line-breaks.html
[autoTrailingWhiteSpace]
# 右键菜单中展示的名称
name = "自动添加结尾空格"
# 是否启用此自定义插件
enable = false
# 插件配置
[autoTrailingWhiteSpace.config]
# 快捷键
hotkey = "ctrl+shift+j"


############### openInTotalCommander ###############
[openInTotalCommander]
# 右键菜单中展示的名称
name = "TC打开"
# 是否启用此自定义插件
enable = false
# 插件配置
[openInTotalCommander.config]
# 快捷键
hotkey = ""
# tc路径
tc_path = "D:\\software\\TotalCMD_64bit_10.52\\TOTALCMD64.EXE"
# tc命令参数
tc_args = '/O /T /P=L  /L="$f"'


############### pluginUpdater ###############
[pluginUpdater]
# 右键菜单中展示的名称
name = "升级插件"
# 是否启用此自定义插件
# 注意：此插件目前仅支持windows系统，若为其他系统，则此插件失效
# 注意：此插件依赖于commander插件，若禁用了commander，则此插件失效
enable = true
# 插件配置
[pluginUpdater.config]
# 众所周知，有些地区无法裸连github，需要使用代理（如：http://127.0.0.1:7890）
# 若值为空，则将弹出模态框，让用户填入代理；若有值，则将直接使用此代理，不再弹出模态框（除非你固定使用某代理，否则不建议使用此配置）
proxy = ""
# 升级时是否弹窗
#   1.always: 总是弹出（等待程序执行完毕后一次性弹出）
#   2.error: 只在异常时弹出
#   3.silent: 总是静默
#   4.echo: 立即回显
exec_show = "echo"
# 是否启用自动静默升级（若为false，则以下配置全部失效）
# 自动升级有两个策略：
#   1.策略一：打开Typora一段时间后，开始执行升级流程
#   2.策略二：每隔一段时间，执行一次升级流程
auto_update = true
# 策略一（单位：ms，若<0，则不使用此策略）
start_update_interval = 300000 # (1000 * 60 * 5)
# 策略二（单位：ms，若<0，则不使用此策略）
update_loop_interval = -1
# 自动升级时使用的回显方式
auto_exec_show = "silent"